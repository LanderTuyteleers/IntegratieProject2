# Option 1: use in-memory H2 database
#spring.datasource.url=jdbc:h2:mem:KandoeDB;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
# Option 2: instead of in-memory database a standalone H2 server can also be used
# Download H2 Server Platform-Independent Zip file from http://www.h2database.com/html/download.html
# Start a H2 server from command line with: java -cp h2*.jar org.h2.tools.Server and use

# POSTGRESQL DATABASE
#spring.datasource.url=jdbc:postgresql://ec2-54-243-31-34.compute-1.amazonaws.com:5432/d8g5o7qeoe1u7l?user=zukulhdsapsjgk&password=49a2583b0c2e76ddec639469c877495efa966aeacdfb3a3810d12e34c7bdad2e&sslmode=require
#spring.datasource.username=zukulhdsapsjgk
#spring.datasource.password=49a2583b0c2e76ddec639469c877495efa966aeacdfb3a3810d12e34c7bdad2e
#spring.datasource.driverClassName=org.postgresql.Driver
#spring.jpa.hibernate.ddl-auto=create-drop

# H2 DB
spring.datasource.url=jdbc:h2:tcp://localhost/~/KandoeDB;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.datasource.password=


#spring.datasource.data=classpath:/sql/data.sql
spring.jpa.properties.org.hibernate.flushMode=ALWAYS
server.port=9090
logging.level.org.springframework.web=ERROR
#File settings (size is in MB)
file.max.size=100000
temp.folder=/tmp
#Jwt Settings
app.name=Kandoe
jwt.header=Authorization
jwt.expires_in=3600
jwt.mobile_expires_in:3600
jwt.secret=CPPStaatVoorCaraPilsPremium
#Mail server settings
spring.mail.host=smtp.gmail.com
spring.mail.username=cpp.kandoe@gmail.com
spring.mail.password=jqydzhfydbsjmsyt
spring.mail.port=587
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.required=true